    // ret.list = list.map { it?.boxed }.toMutableList()
    // src:
    // var nestedList:              MutableSet< MutableList<String>                    > = mutableSetOf()
    //                              Set       < List<Name>                             >
    // var nestedList:              MutableSet< MutableList<String?>                   > = mutableSetOf()
    //                              Set       < List<Name?>                            >
    // var nestedList:              MutableSet< MutableList<Inner>                     > = mutableSetOf()
    //                              Set       < List<Inner>                            >
    // var nestedList:              MutableSet< MutableList<Inner?>                    > = mutableSetOf()
    //                              Set       < List<Inner?>                           >

    // toBuilder: as is

    // toDslBuilder:
    // ret.nestedList = nestedList  .map      { it.map { it.boxed }                  .toMutable()   }.toMutable()
    // ret.nestedList = nestedList  .map      { it.map { it?.boxed }                 .toMutable()   }.toMutable() // null
    // ret.nestedList = nestedList  .map      { it                                   .toMutable()   }.toMutable()
    // ret.nestedList = nestedList  .map      { it                                   .toMutable()   }.toMutable() // null

    // DslBuilder.return:
    // nestedList = nestedList      .map      { it.map(::name)                       .toImmutable()  }.toImmutable()
    // nestedList = nestedList      .map      { it.map { it?.let(::name) }           .toImmutable()  }.toImmutable() // null
    // nestedList = nestedList      .map      { it                                   .toImmutable()  }.toImmutable()
    // nestedList = nestedList      .map      { it                                   .toImmutable()  }.toImmutable() // null


    // src: nestedMap: MutableMap<String?, MutableList<String>> = mutableMapOf()
    //val qqq = nestedMap.entries.associate { it.key?.let(NameImpl::create) to it.value.map { NameImpl.create(it) }.toList() }
    /*
    public val nestedMaps: Map<Map<Name, Inner?>, List<List<Inner?>>>
    nestedMaps = nestedMaps.entries.associate {
            it.key.entries.associate {
              NameImpl.create(it.key) as Name to it.value
            } to it.value.map { it.toList() }.toList()
          }

    public var nestedMaps1: MutableMap< MutableMap<String, AATestCollections.Inner>, String                                     > = mutableMapOf()
    public var nestedMaps2: MutableMap< String,                                      MutableMap<String, AATestCollections.Inner>> = mutableMapOf()

    val p1: Map<Map<AATestCollections.Name, AATestCollections.Inner>, AATestCollections.Name> =
        nestedMaps1.entries.associate { it.key.entries.associate { NameImpl.create(it.key) as AATestCollections.Name to it.value } to NameImpl.create(it.value) }

    val p2: Map<AATestCollections.Name, Map<AATestCollections.Name, AATestCollections.Inner>> =
        nestedMaps2.entries.associate { NameImpl.create(it.key)                                                                    to it.value.entries.associate { NameImpl.create(it.key) to it.value } }
*/

        /*
                                                                                          | init                       | arg[0]                     | arg[1]                                                | finish
list:        List        <Name?>
             MutableList <String?>                                                     -> | <name>.map {                 it?.let(::name)                                                                    | }.toList(),
                                                                                       -> | <name>.map {                 it?.boxed                                                                          | }.toMutableList()
_set:        Set         <Name>
             MutableSet  <String>                                                      -> | <name>.map {                 name(it)                                                                           | }.toSet(),
                                                                                       -> | <name>.map {                 it.boxed                                                                           | }.toMutableSet()
listInner:   List        <Inner?>
             MutableList <Inner?>                                                      -> | <name>                       empty                                                                              | .toList()
                                                                                       -> | <name>                       empty                                                                              | .toMutableList()
nestedList:  Set         <List<Inner?>>
             MutableSet  <MutableList<Inner?>>                                         -> | <name>.map {                 it                      .toList()                                                  | }.toSet(),
                                                                                       -> | <name>.map {                 it                      .toMutableList()                                           | }.toMutableSet()
nestedList1: Set         <List<Name>>
             MutableSet  <MutableList<String>>                                         -> | <name>.map {                 it     .map { name(it) }.toList()                                                  | }.toSet(),
                                                                                       -> | <name>.map {                 it     .map { it.boxed }.toMutableList()                                           | }.toMutableSet()
                                                                                          | init                       | arg[0]                     | arg[1]                                                     | finish
simpleMap:   Map         <Name, Inner>
             MutableMap  <String, Inner>                                               -> | <name>.entries.associate {   name(it.key)          to       it.value                                                    },
                                                                                       -> | <name>.entries.associate {   it.key.boxed          to       it.value                                                    }.toMutableMap()
simpleMap1:  Map         <Name, Name?>
             MutableMap  <String, String?>                                             -> | <name>.entries.associate {   name(it.key)          to       it.value?.let(::name)                                                      },
                                                                                       -> | <name>.entries.associate {   it.key.boxed          to       it.value?.boxed                                                            }.toMutableMap()
nestedMap:   Map         <Name?, List<Name>>                                                                                                                          | arg[1][0]
             MutableMap  <String?, MutableList<String>>                                -> | <name>.entries.associate {   it.key?.let(::name)   to       it.value   .map { name(it) }                                               },
                                                                                       -> | <name>.entries.associate {   it.key?.boxed         to       it.value   .map { it.boxed }.toMutableList()                               }.toMutableMap()
nestedMaps:  Map         <Map<Inner, Inner?>, List<List<Inner?>>>
             MutableMap  <MutableMap<Inner, Inner?>, MutableList<MutableList<Inner?>>> -> | <name>.entries.associate {   it.key.toMap()        to       it.value   .map { it.toList() }                                            },
                                                                                       -> | <name>.entries.associate {   it.key.toMutableMap() to       it.value   .map { it.toMutableList() }.toMutableList()                     }.toMutableMap()
nestedMaps1: Map         <Name, Map<Name, Inner>>                                                                                                                                    | arg[1][0]       arg[1][1]
             MutableMap  <String, MutableMap<String, Inner>>                           -> | <name>.entries.associate {   name(it.key)          to       it.value   .entries.associate { name(it.key) to it.value }                 },
                                                                                       -> | <name>.entries.associate {   it.key.boxed          to       it.value   .entries.associate { it.key.boxed to it.value }.toMutableMap()  }.toMutableMap()

    ret.list = list.map { it?.boxed }.toMutableList()
    ret._set = _set.map { it.boxed }.toMutableSet()
    ret.listInner = listInner.toMutableList()

    ret.nestedList = nestedList.map { it.toMutableList() }.toMutableSet()
    ret.nestedList1 = nestedList1.map { it.map { it.boxed }.toMutableList() }.toMutableSet()

    ret.simpleMap = simpleMap.entries.associate { it.key.boxed to it.value }.toMutableMap()
    ret.simpleMap1 = simpleMap1.entries.associate { it.key.boxed to it.value?.boxed }.toMutableMap()
    ret.nestedMap = nestedMap.entries.associate { it.key?.boxed to it.value.map { it.boxed }.toMutableList() }.toMutableMap()
    ret.nestedMaps = nestedMaps.entries.associate { it.key.toMutableMap() to it.value.map { it.toMutableList() }.toMutableList() }.toMutableMap()
    ret.nestedMaps1 = nestedMaps1.entries.associate { it.key.boxed to it.value.entries.associate { it.key.boxed to it.value }.toMutableMap() }.toMutableMap()

         */

