package ru.it_arch.clean_ddd.domain

import io.kotest.core.spec.style.FunSpec
import io.kotest.matchers.shouldBe
import ru.it_arch.clean_ddd.domain.internal.`to implementation class name from options or from`
import ru.it_arch.clean_ddd.domain.model.CompositeClassName
import ru.it_arch.kddd.KDGeneratable

class GeneratableImplTest : FunSpec({

    val srcClassName = CompositeClassName.ClassName("MyType")

    pos("ClassNameImpl must be as '@KDGeneratable.implementationName'") {
        val resultClassName = "MyTestImpl"
        val annotations = setOf(KDGeneratable(implementationName = resultClassName))
        with(options {}) {
            srcClassName `to implementation class name from options or from` annotations shouldBe
                ru.it_arch.clean_ddd.domain.model.CompositeClassName.ClassName(resultClassName)
        }
    }

    pos("ClassNameImpl must be generated by Options rules without '@KDGeneratable'") {
        val resultClassName = "MyTypeImpl"
        with(options {}) {
            srcClassName `to implementation class name from options or from` emptySet() shouldBe
                ru.it_arch.clean_ddd.domain.model.CompositeClassName.ClassName(resultClassName)
        }
    }
})
